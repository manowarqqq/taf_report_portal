name: Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:

  dotenv_init:
    runs-on: ubuntu-latest
    steps:
      - name: 'Create env file'
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pwd && ls -lah
      - run: npm i
      - run: npm run build

  sonarcloud:
    needs: [build]
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  teams_integration_failure:
    runs-on: ubuntu-latest
    needs: [dotenv_init, build, sonarcloud]
    if: ${{ always() && contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped')}}
    steps:
      - run: exit 1
      - name: notification failure
        uses: skitionek/notify-microsoft-teams@master
        if: always()
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          overwrite: "{title: 'Github Bot notification FAILURE'}"
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}


  teams_integration_success:
    runs-on: ubuntu-latest
    needs: [dotenv_init, build, sonarcloud]
    if: always() && ${{needs.*.result == 'success'}}
    steps:
      - uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          overwrite: "{title: 'Github Bot notification SUCCESS'}"
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/taf:latest
      - name: Run tests
        run: docker run -itd -v /$(pwd):/app/mochawesome-report ${{ secrets.DOCKERHUB_USERNAME }}/taf:latest
#        run: docker cp ${{ secrets.DOCKERHUB_USERNAME }}/taf:/mochawesome-report ./mochawesome-report
      - run: pwd && ls -lah
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
          with:
            files: |
              $(pwd)/mochawesome-report/mochawesome.json

#  test_results:
#    runs-on: ubuntu-latest
#    needs: [ docker ]
#    steps:
#      - run: cd .. && cd .. & pwd && ls -lah
#      - name: Publish Test Results
#        uses: EnricoMi/publish-unit-test-result-action@v2
#        with:
#          files: |
#            $(pwd)/mochawesome-report/mochawesome.json


